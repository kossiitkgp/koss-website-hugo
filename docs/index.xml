<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kharagpur Open Source Society on Kharagpur Open Source Society</title>
    <link>/</link>
    <description>Recent content in Kharagpur Open Source Society on Kharagpur Open Source Society</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Oct 2018 00:00:00 +0530</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Git Bash for git in Windows</title>
      <link>/blog/git-bash-in-windows/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0530</pubDate>
      
      <guid>/blog/git-bash-in-windows/</guid>
      <description>

&lt;h1 id=&#34;using-git-bash-for-git-in-windows&#34;&gt;Using Git Bash for git in Windows&lt;/h1&gt;

&lt;p&gt;This blog post helps in installing git bash, for using git in windows. Git for
Windows provides a BASH emulation used to run Git from the command line. *NIX
users should feel right at home, as the BASH emulation behaves just like the
“git” command in LINUX and UNIX environments.&lt;/p&gt;

&lt;h3 id=&#34;steps-to-install-git-for-windows&#34;&gt;Steps to install Git for Windows&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Click on the link to [&lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34;&gt;download&lt;/a&gt;]. This will
redirect to a page, where git will be automatically downloaded.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*r84LXjhlRvyL31uA9B0ULw.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;First window for installation&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*b_Gpwccl8Ju3cMIOdv2WrA.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;You can check off Git GUI, if you do not need it&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*Svkldsu4asg-CxUhuM-PWw.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;If you are having any preferable text editor, you can choose one.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*D06k45WD3tmHG6Qc-AT9nQ.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Choose option 1 , unless you know what you are doing&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*qtzvCVmTW1nv_cQdCJDdGw.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*RSQfiZw7Gxtopd6JqMdDCg.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*Y38aZdXgII6mHs7Q0FIR9g.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*dsn3cGji9Y4HJDvLUWwsXA.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*IPJen_NLY8WjxsAwS-eZrg.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;You can skip bleeding edge technology&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*0f20vDHE6R593r3D67anYw.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Git is being installed&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*1vG0qWZ6ej92TWpa7SyvMw.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Voila ! Git is installed&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-steps-before-we-start-using-git&#34;&gt;Some Steps before we start using Git&lt;/h3&gt;

&lt;p&gt;Note, we have to set username, and proxy settings, for using git in windows.&lt;/p&gt;

&lt;h4 id=&#34;configure-git&#34;&gt;Configure git:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After you’ve installed git properly, it’s time to set some variables for the git
configuration. You’ve to do this only once. Follow the commands on terminal.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User settings to be set —&lt;/p&gt;

&lt;p&gt;// Setting system.proxy in git                                               git config &amp;ndash;global https.proxy&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now check &lt;code&gt;git config --list&lt;/code&gt; to know you&amp;rsquo;ve set the variables correctly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulations, you’ve git up and running on your computer. Now, it’s time to
start learning git.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This article is written by &lt;a href=&#34;https://github.com/yashrsharma44&#34; target=&#34;_blank&#34;&gt;Yash Sharma&lt;/a&gt;*&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installing Python in Windows</title>
      <link>/blog/installing-python-in-windows/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0530</pubDate>
      
      <guid>/blog/installing-python-in-windows/</guid>
      <description>

&lt;h1 id=&#34;installing-python-in-windows&#34;&gt;Installing Python in Windows&lt;/h1&gt;

&lt;p&gt;This article deals with installing Python on Windows. Even though Python can be
installed in Windows, it is recommended to use Linux, to use Python and develop
applications. While I have used windows 10 for the demonstration of
installation, this can also be referred for installing the same in Windows 7.I
have installed both Python2 and Python3.&lt;/p&gt;

&lt;p&gt;Let’s begin!&lt;/p&gt;

&lt;h3 id=&#34;download-the-python-software&#34;&gt;Download the Python Software&lt;/h3&gt;

&lt;p&gt;Download the required files from the Python’s website
[&lt;a href=&#34;https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi&#34; target=&#34;_blank&#34;&gt;Python2&lt;/a&gt; |
&lt;a href=&#34;https://www.python.org/downloads/release/python-370/&#34; target=&#34;_blank&#34;&gt;Python3&lt;/a&gt;].&lt;/p&gt;

&lt;h3 id=&#34;installing-python-2&#34;&gt;Installing Python 2&lt;/h3&gt;

&lt;p&gt;I have used the following steps to install Python 2&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*UOiYWaNMJTgLIlIayw-OJQ.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Choose Install for all users&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*en8i8Wf80eINFhv5n6Q1EQ.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Keep the folder where Python will be installed in C drive&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Keep the default options, and click Next&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Python will be installed&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;installing-python-3&#34;&gt;Installing Python 3&lt;/h3&gt;

&lt;p&gt;After installing Python 2, we will install Python 3. Note that if you want to
install only Python 2( which is not recommended), then you have to append the
&lt;code&gt;python.exe&lt;/code&gt; in the PATH variable.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Choose Add Python3.7 to PATH&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Python will be installed&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Python is installed.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;running-python-2-and-python-3&#34;&gt;Running Python 2 and Python 3&lt;/h3&gt;

&lt;p&gt;You can start Python 2, using &lt;code&gt;py -2&lt;/code&gt; command in your command terminal. For
Python 3 use, &lt;code&gt;py -3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Python 2 and Python 3 is up and running !&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;caveat-differences-between-py2-and-py3&#34;&gt;Caveat! Differences between Py2 and Py3&lt;/h3&gt;

&lt;p&gt;Note: This part is just for beginners who would be installing python for the
very first time. Of course, there are many more differences between the two
version.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;print&lt;/strong&gt; : In python 2, the print was a statement, and hence one could print
any item, and wrapping them in curly brackets , was optional. However, due the
misuse of the above flexibility, the print statement was changed into a
function, and thus restricting the misuse of the above said advantage.&lt;/li&gt;
&lt;li&gt;**Integer division **: The integer division in python2 takes two numbers, and
returns the integer portion, as it discards the decimal part. This was certainly
not obvious, as &lt;code&gt;3/2&lt;/code&gt; should return &lt;code&gt;1.5&lt;/code&gt; and not &lt;code&gt;1&lt;/code&gt;. Python 3 ensured that the
integer division returns values in float, rather than int.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; : Python 3.3 performs at approximately the same speed as Python 2.7,
although some benchmarks measure the new language as being much faster.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This article is written by &lt;a href=&#34;https://github.com/yashrsharma44&#34; target=&#34;_blank&#34;&gt;Yash Sharma&lt;/a&gt;*&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Git Cheatsheet</title>
      <link>/blog/git-cheatsheet/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0530</pubDate>
      
      <guid>/blog/git-cheatsheet/</guid>
      <description>

&lt;h1 id=&#34;git-cheatsheet&#34;&gt;Git Cheatsheet&lt;/h1&gt;

&lt;h2 id=&#34;what-is-git&#34;&gt;What is Git?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*8xhLJt8Nlps8CDETPgO6lg.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git’s&lt;/a&gt; official website:&lt;/p&gt;

&lt;p&gt;Git is a &lt;a href=&#34;https://git-scm.com/about/free-and-open-source&#34; target=&#34;_blank&#34;&gt;free and open source&lt;/a&gt;
distributed version control system designed to handle everything from small to
very large projects with speed and efficiency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About Version Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is version control, and why should you care? Version control is a system
that records changes to a file or set of files over time so that you can recall
specific versions later. Even though examples in most of the cases show software
source code as the files under version control, in reality any type of file on a
computer can be placed under version control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install Git:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To check version:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git -- version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For configuring:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config -- global &amp;lt;keyword&amp;gt; “Data”&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;keyword&amp;gt;&lt;/code&gt; can be &lt;code&gt;user.name&lt;/code&gt; ,&lt;code&gt;user.email&lt;/code&gt;, &lt;code&gt;core.editor&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;To display current saved configration type &lt;code&gt;git config --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For help:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git help &amp;lt;verb&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;eg: &lt;code&gt;git help config&lt;/code&gt;for help regarding configration process&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a local repository:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simply cd into the directory you want to track and simply type &lt;code&gt;git init&lt;/code&gt;. This
will create a .git file in the directory with a basic skeleton without any
commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To check which files can be commited:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;this will list the files that can be commited&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To ignore files create a .gitignore file using &lt;code&gt;touch .gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open this using text editor and add names of files you want to ignore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Moving files to staging area:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For adding files individually use –&lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For adding all files at once use –&lt;code&gt;git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To remove files from staging area use –&lt;code&gt;git reset &amp;lt;filename&amp;gt;&lt;/code&gt;and to remove all
simply type &lt;code&gt;git reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To commit the files:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but it is necessary to add messages with the commit to make sure what we did ;
so for that we use &lt;code&gt;-m&lt;/code&gt; extension like &lt;code&gt;git commit -m “message”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*fwUZtFBXFvHwMwmAWlde5w.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Staging and committing Flowchart.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To check the commit history:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloning a repository from internet:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone &amp;lt;url&amp;gt; &amp;lt;location&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To clone into current directory use &lt;code&gt;.&lt;/code&gt;in place of location.&lt;/li&gt;
&lt;li&gt;To check status of the cloned repository use &lt;code&gt;git remote -v&lt;/code&gt; This will give the
location from where it is fetched.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -a&lt;/code&gt; gives all the branches in the cloned repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Changing and submitting:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make changes to the file of the cloned repository.Now to see change made type
&lt;code&gt;git diff &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will display the change made with respect to the&lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. By default if
&lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; field is left empty , Git compares it with&lt;code&gt;HEAD&lt;/code&gt; i.e the last
commit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another feature or form of git diff is&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff --cached &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This shows the diff between your **staged changes **and the &lt;commit&gt;. So, here
it gives the diff between your index and the last commit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff &amp;lt;commit&amp;gt;&lt;/code&gt; shows the diff between the *current ***working tree **and
the &lt;commit&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Now &lt;code&gt;git status&lt;/code&gt;will view the modified files .&lt;/li&gt;
&lt;li&gt;Add the file to the staging area using &lt;code&gt;git add -A.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit these files with appropriate message .&lt;/li&gt;
&lt;li&gt;Now before pushing it back . We need to pull and check whether any other person
made a change in the branch since the last time type in &lt;code&gt;git pull origin master&lt;/code&gt;
( If on master branch else use branch name in place of master).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; is often confused with &lt;code&gt;git fetch&lt;/code&gt; .The basic difference is stated
below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt; really only downloads new data from a remote repository — but it
doesn’t integrate any of this new data into your working files. Fetch is great
for getting a fresh view on all the things that happened in a remote
repository.&lt;br&gt; Due to it’s “harmless” nature, you can rest assured: fetch will
never manipulate, destroy, or screw up anything.&lt;code&gt;git fetch&lt;/code&gt;* &lt;em&gt;is also useful
when we manually wish to merge or check and merge conflicts that arise whereas
&lt;code&gt;git pull&lt;/code&gt;&lt;/em&gt; &lt;em&gt;directly fetches and merges (refer branching for merge). It is
therefore more preferred to use &lt;code&gt;git fetch&lt;/code&gt;&lt;/em&gt; .*&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; in contrast, is used with a different goal in mind: to update your
current HEAD branch with the latest changes from the remote server. This means
that pull not only downloads new data; it also directly &lt;strong&gt;integrates&lt;/strong&gt; it into
your current working copy files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now for finally pushing type in –&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*lWS_YsYDgGNzwleoSK8jOg.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Basic process Flowchart.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branching:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*roh6Eb2dFSeQhM0Fgs0cng.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;A typical image which represents blue dots as master and rest as side branches.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To create a new branch use &lt;code&gt;git branch &amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To check all the branches present use &lt;code&gt;git branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To switch over branch use &lt;code&gt;git checkout &amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To push a commited changes type in &lt;code&gt;git push -u origin &amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To merge the current branch you are working on to master use &lt;code&gt;git merge
&amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To push the changes we simply use &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To check it they are merged type in &lt;code&gt;git branch --merged&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the branch is successfully merged we can now delete the branch–&lt;code&gt;git branch -d
&amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To switch to a previous version of the code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We do &lt;code&gt;git reset &amp;lt;mode&amp;gt; &amp;lt;SOME-COMMIT&amp;gt;&lt;/code&gt;(some commit is the commit number ) then
Git will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your current branch (typically &lt;code&gt;master&lt;/code&gt;) back to point at &lt;code&gt;&amp;lt;SOME-COMMIT&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then it will modify your working tree and the index (“staging area”) according
to the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; selected.&lt;/li&gt;
&lt;li&gt;The mode must be one of the following (If &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is left blank then by default
&lt;code&gt;--mixed&lt;/code&gt; is selected) —&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt;—Does not touch the index file or the working tree at all (but resets
the head to&lt;code&gt;&amp;lt;SOME-COMMIT&amp;gt;&lt;/code&gt;, just like all modes do). This leaves all your
changed files “Changes to be committed”, as &lt;em&gt;git status&lt;/em&gt; would put it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed&lt;/code&gt;— Resets the index but not the working tree (i.e. the changed files
are preserved but not marked for commit) and reports what has not been updated.
This is the default action.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt;— Resets the index and working tree. Any changes to tracked files in
the working tree since &lt;code&gt;&amp;lt;SOME-COMMIT&amp;gt;&lt;/code&gt; are discarded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Stashing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Often there is a condition where code is in a messy state and you don’t want to
work any further . Also you can’t commit this &lt;em&gt;half-written code&lt;/em&gt;. In such
conditions function called &lt;code&gt;git stash&lt;/code&gt; is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type in &lt;code&gt;git stash&lt;/code&gt; this will push this code onto a stack while keeping the
working directory clean.Further use of this function again and again on the same
code will generate a stash stack.&lt;/li&gt;
&lt;li&gt;To display the stash stack use &lt;code&gt;git stash list&lt;/code&gt; .The list will be numbered as
&lt;code&gt;stash@{0}&lt;/code&gt;,&lt;code&gt;stash@{1}&lt;/code&gt; ….&lt;code&gt;stash@{n}&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Finally when you decide to work again and want to apply the changes use &lt;code&gt;git
stash apply&lt;/code&gt; . To apply any older stash from the stash stack use &lt;code&gt;git stash
apply stash@{n}&lt;/code&gt; where n is the stash number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For Reference regarding Git :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For practicing and learning git checkout —
&lt;a href=&#34;https://github.com/kossiitkgp/git-sandbox&#34; target=&#34;_blank&#34;&gt;https://github.com/kossiitkgp/git-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic git
:&lt;a href=&#34;https://www.youtube.com/watch?v=HVsySz-h9r4&amp;amp;t=464s&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=HVsySz-h9r4&amp;amp;t=464s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resolving a pull request:
&lt;a href=&#34;https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/&#34; target=&#34;_blank&#34;&gt;https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This article is written by &lt;a href=&#34;https://github.com/taapasX28&#34; target=&#34;_blank&#34;&gt;Taapas Agrawal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning command line basics and Virtual box</title>
      <link>/blog/virtual-box-and-vagrant/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0530</pubDate>
      
      <guid>/blog/virtual-box-and-vagrant/</guid>
      <description>

&lt;h1 id=&#34;learning-command-line-basics-and-virtual-box&#34;&gt;Learning command line basics and Virtual box&lt;/h1&gt;

&lt;p&gt;Hello people!&lt;/p&gt;

&lt;p&gt;So I was looking up for a course that would teach me the basics of linux command
line and I got across this one. Though I already know the basics of command line
but just in case I was missing something, I thought to go through it once.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://in.udacity.com/course/linux-command-line-basics--ud595&#34; target=&#34;_blank&#34;&gt;https://in.udacity.com/course/linux-command-line-basics--ud595&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course is for a beginner. It’s not preferred to go through it, if you
already know about the commands. But I have mentioned the brief summary of it
and key points which I didn’t know.&lt;/p&gt;

&lt;p&gt;In the start of the course, I found something really fascinating, how to set up
a virtual machine on my own computer. It made me feel really good that I can set
up a new computer on my own system. Sounds interesting, right? Why Virtual
Machine? This link will tell you the reasons why people prefer to use the
virtual machine for their work.&lt;/p&gt;

&lt;p&gt;So in this blog, I will mention all those things which I learnt something new
today.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To set up the virtual machine, follow the above link. In the first few slides,
you will be carried through the instructions how to set the virtual environment
up. I wont mention that here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat &amp;lt;file_name&amp;gt;&lt;/code&gt; will display the content of the file on the terminal itself.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man &amp;lt;command_name&amp;gt;&lt;/code&gt; for eg: man apt will give you the manual pages (detailed
help) of the command apt. you can look through it in case of a doubt. &lt;em&gt;Note&lt;/em&gt;:
Many commands also have a &lt;code&gt;-h&lt;/code&gt; flag which shows help. &lt;code&gt;man&lt;/code&gt; shows a “detailed
version” of the help.&lt;/li&gt;
&lt;li&gt;Line based commands: There some commands which when typed doesn’t return back
the cursor, eg: &lt;code&gt;bc&lt;/code&gt; (used to access the calculator). You got to type quit or
Ctrl+D for exiting from that interface.&lt;/li&gt;
&lt;li&gt;There is a command &lt;code&gt;less &amp;lt;file_name&amp;gt;&lt;/code&gt; which is used to access a text file page
wise rather than using &lt;code&gt;cat &amp;lt;file_name&amp;gt;&lt;/code&gt; which displays the whole text. This is
especially useful when dealing with long texts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span class=&#34;figcaption_hack&#34;&gt;Relative Path v/s Absolute Path&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; without arguments is a shortcut to take you to your home directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; is used to make a directory (You all must be knowing that). But
&lt;code&gt;rmdir&lt;/code&gt;is used to remove an empty directory (Note empty). If you wish to remove
a directory with files in it, you will have to do that recursively using &lt;code&gt;rm -r
&amp;lt;directory name&amp;gt;&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; is used to list all the files in the current directory. &lt;code&gt;ls -a&lt;/code&gt; will
list all the hidden and non-hidden files in the directory and &lt;code&gt;ls -al&lt;/code&gt; will give
all the details of the files. Here -a and -al are called the flags.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; will create an empty file in the current directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; copies the file in the required directory. Syntax is like &lt;code&gt;cp test.txt
Downloads&lt;/code&gt; . Here the second word is the destination folder. &lt;code&gt;cp -r docs
more_docs&lt;/code&gt; copies the content of of docs to more_docs. Note the -r flag standing
for recursive.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;date&lt;/code&gt; gives the current date.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So to wrap up, using the virtual machine really amazed me. Using it, I can store
files hidden, in case needed. I even learnt about some new commands of the
command line.&lt;/p&gt;

&lt;p&gt;Keep learning! Cheers!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This article is written by &lt;a href=&#34;https://github.com/nikhilch23&#34; target=&#34;_blank&#34;&gt;Nikhil Choudhary&lt;/a&gt;*&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>An informal introduction to KWoC</title>
      <link>/blog/informal-introduction-to-kwoc/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0530</pubDate>
      
      <guid>/blog/informal-introduction-to-kwoc/</guid>
      <description>

&lt;h1 id=&#34;an-informal-introduction-to-kwoc-http-kwoc-kossiitkgp-org&#34;&gt;An informal introduction to &lt;a href=&#34;http://kwoc.kossiitkgp.org/&#34; target=&#34;_blank&#34;&gt;KWoC&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Great People of tomorrow, every perfume starts with one ingredient but it is
the last one that makes it come to life.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hi! and Welcome! To all esteemed student who are trying to pursue their dreams
irrespective of their departments and previous experience.&lt;/p&gt;

&lt;p&gt;Everyone is welcome. Here “Everyone” is not a metaphor, “Everyone” means
everyone.&lt;/p&gt;

&lt;p&gt;Open source is not just “GSoC”. It is a lot about, idea, ego, altruism,
expression and satisfaction. From software to hardware to information anything
can be opensource. We do open-source because we love to. “GSoC” is just a good
motivation to start.&lt;/p&gt;

&lt;p&gt;Some famous open source projects:&lt;/p&gt;

&lt;p&gt;Firefox, Linux, Ubuntu, VLC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now coming back to KWoC&lt;/strong&gt;, common problems faced and how to be prepared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Psychological Barriers&lt;/strong&gt; :- Completing KWoC requires you to overcome a
statement “I have just started with coding” or “These are State of Art things,It
requires a lot of experience”. I will easily term these statements as myths or
excuse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why these thoughts arise&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;From project info. You will read fancy terms as “Scraping” “Audio-recognition”
“Natural Language Processing” “Deep Learning” “Networking” and you will lose
your heart. But the matter of truth is that project info tells you just about
what that project really does, not about the process how it performs that task.
In most of the projects mentioned, you are not going to implement everything
yourself and you don’t need to read everything present in the codebase. There
are pre-implemented library for most of state of art things, you just need to
learn some basic info about how to use these libraries.&lt;/p&gt;

&lt;p&gt;Most of the software development is based on basic conditional statements,
libraries and lot of common sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mentor Problem:&lt;/strong&gt;- A lot of time there is a problem in response of mentor. A
lot of time mentor doesn’t respond in a helpful way or doesn’t respond at all.
Let me tell you a ravishing truth “This phenomenon happens in GSoC as well”.
Really you can’t help. Now what, you are in shoes of Robert frost, “Two roads
diverged in a yellow wood, And sorry I could not travel both”, either you can
become hopeless again and take a road more traveled or you can make it a
memorable event where you overcame your mediocrity. Try some other project with
similar portfolio. The cycle is shortlist project, talk to mentor, if you find
him convincing or if you think you can do project without his guidance then only
proceed, then code debug and repeat.Bug co-ordinator, but mark my word if you
are bugging anyone it’s your responsibility to respect his/her time, give back
your effort or remember that “Karma is a bitch”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu:-&lt;/strong&gt;If you are new to ubuntu, “KWOC is going to be really awesome” .
Because you will remember this winter for like 1–2 years, because if you are
high on grit you will be going through a lot of learning shit. Okay, Siri is
here to your rescue, Ubuntu is nothing like Windows but considering you as a
Windows user, Instead of .exe there are other methods to install applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/600/0*7IlL4k_OFlZhgC3u.&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Here is some Chinese wisdom for you my friend.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There is terminal in ubuntu &lt;strong&gt;(ctrl + alt + t)&lt;/strong&gt;. Here is an important
&lt;strong&gt;[&lt;strong&gt;&lt;a href=&#34;https://www.pcsteps.com/5010-basic-linux-commands-terminal/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/strong&gt;]** to
make you little aware of terminal. Get aware of this blog, terminal is quite
important for software development. Here is the
&lt;strong&gt;[&lt;/strong&gt;[chest]](&lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=801404&#34; target=&#34;_blank&#34;&gt;https://ubuntuforums.org/showthread.php?t=801404&lt;/a&gt;) of all beginner
friendly links.How to install software and
libraries&lt;/strong&gt;[&lt;strong&gt;&lt;a href=&#34;https://askubuntu.com/questions/307280/how-do-i-install-applications-in-ubuntu&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/strong&gt;]**.
You don’t need to learn everything at one go. As you start coding and setting up
environment for your respective project refer to these link as per need. If you
have not installed Ubuntu then visit this
&lt;strong&gt;[l&lt;/strong&gt;&lt;a href=&#34;https://wiki.metakgp.org/w/How_to_install_Ubuntu_as_Dual_Boot&#34; target=&#34;_blank&#34;&gt;ink&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git:-&lt;/strong&gt; A command line tool to save different versions of your code wrt to
changes. Nothing more or less than that. People have complicated this
unnecessarily. It also interacts with Github and Bitbucket.&lt;/p&gt;

&lt;p&gt;One of the best places to learn git is &lt;a href=&#34;http://learngitbranching.js.org/&#34; target=&#34;_blank&#34;&gt;Learn Git
Branching&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Starter pack of git :-&lt;/p&gt;

&lt;p&gt;a) If you have installed Ubuntu very recently then for installation of git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b) When you use git for the first time, you’ll have to configure it with details
matching with your GitHub profile.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config — global user.name “
”

git config — global user.email “
”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c) If you are behind a proxy server then to configure git to access Github.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config — global http.proxy 172.16.2.30:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d) Then login in your Github account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is just a sample. Change URL according to your project. Don’t just
blindly copy paste. Read instruction properly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;e) Visit this link &lt;a href=&#34;https://github.com/kossiitkgp/kossiitkgp.github.io&#34; target=&#34;_blank&#34;&gt;Kossiitkgp website
repo&lt;/a&gt; [Visit your respective
project link].&lt;/p&gt;

&lt;p&gt;f) On top right of that window click on watch button and pick watching option&lt;/p&gt;

&lt;p&gt;g) Beside that button is star, star it as well, then there is fork button, click
on fork button.&lt;/p&gt;

&lt;p&gt;h) Then you will be automatically directed to your forked window.&lt;/p&gt;

&lt;p&gt;k) Click on that green button of clone or download.&lt;/p&gt;

&lt;p&gt;l) When you click there, a menu appears where there is an option to copy link
but ensure that you copy the link is in this format&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*bzxLympOO7EubZJW.&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And not in this format:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*NuKuoB2gB1FnM4af.&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;m) Then press ctrl+alt+t&lt;/p&gt;

&lt;p&gt;n)Then enter in terminal “git clone ” and then press ctrl+shift + v and then hit
enter (hitting enter is an untold rule).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o) cd kossiitkgp.github.io &lt;strong&gt;[change according to name of your project]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;p) Then enter in terminal git remote add upstream and then press ctrl+shift+v&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b newbranch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;r) If you can, edit some files in cloned folder (using git clone)for productive
use, save your changes by ctrl + s (if using sublime or gedit etc) .&lt;/p&gt;

&lt;p&gt;s) Then properly review your changes then type this command in terminal in
already opened terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -A

git commit -m “
”

git push origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;v) Enter your username and password. While entering password you will not see
anything&lt;/p&gt;

&lt;p&gt;w) Done&lt;/p&gt;

&lt;p&gt;x) Then visit
&lt;a href=&#34;https://github.com/yourusername&#34; target=&#34;_blank&#34;&gt;https://github.com/your-user-name&lt;/a&gt;&lt;strong&gt;(plz
change)&lt;/strong&gt;/kossiitkgp.github.io&lt;/p&gt;

&lt;p&gt;y) Then click on pull request then click on create new pr.(Check two branches
which you are comparing)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*26RvHxhcjsbA4ZSJ.&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*nfM7sqVODhn2qA30.&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*xixf1SOFoTSCeN98.&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;z) If you are sending pr after few days of cloning then before &lt;strong&gt;git push&lt;/strong&gt;
first do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**(there are other methods as well like fetch and rebase) **or face the wrath of
merge conflict.&lt;/p&gt;

&lt;p&gt;For proper crisp tutorial read
&lt;a href=&#34;https://www.atlassian.com/git/tutorials&#34; target=&#34;_blank&#34;&gt;[this]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:-&lt;/strong&gt; It is just a website(like Fb/Orkut) where pull request are similar
to Fb’s friend request. It is definitely more productive and useful.&lt;/p&gt;

&lt;p&gt;But a more complicated definition&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“GitHub is a web-based Git or version control repository and Internet hosting
service. It is mostly used for code. It offers all of the distributed version
control and source code management (SCM) functionality of Git as well as adding
its own features. It provides access control and several collaboration features
such as bug tracking, feature requests, task management, and wikis for every
project.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Definitely, it gives a lot more insight only if you understand the terminology
:) :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading codebase&lt;/strong&gt;:- My steps would be:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. Setup a source insight( or any good source code browser you use)
workspace/project with all the source, header files, in the code base. Browsing
at a higher level from the top most function(main) to lowermost function. During
this code browsing, keep making notes on a paper/or a word document tracing the
flow of the function calls. Do not get into function implementation
nitti-gritties in this step, keep that for a later iterations. In this step keep
track of what arguments are passed on to functions, return values, how the
arguments that are passed to functions are initialized how the value of those
arguments set modified, how the return values are used ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. After one iteration of step 1, after which you have some level of
understanding of code and data structures used in the code base, setup
a…………………..&lt;/em&gt;&lt;a href=&#34;https://stackoverflow.com/questions/214605/the-best-way-to-familiarize-yourself-with-an-inherited-codebase&#34; target=&#34;_blank&#34;&gt;[source]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Identify why I’m reading code. Could be to understand an algorithm, see
different coding style, learn a language, find a defect, figure out a
workaround, understand a badly documented feature, know how to extend a feature,
make a plugin, discover how to exploit a feature beyond the initial intents, …&lt;/p&gt;

&lt;p&gt;2) Find where to start reading. That could be the main/index file of the
application or library, a manifest. Or you could search the code for a
documented
feature……………….&lt;a href=&#34;https://www.quora.com/How-do-you-read-a-big-code-base-like-a-pro&#34; target=&#34;_blank&#34;&gt;[source]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Googling:-&lt;/strong&gt; Google any error which comes while development.This
&lt;a href=&#34;https://medium.com/@apoorvakumar169/art-of-searching-the-web-for-soft-dev-1-4e7044c6f95f&#34; target=&#34;_blank&#34;&gt;[URL]&lt;/a&gt;
is in different context though. But you can get some idea. If you face any
problem while development just translate your problem to words and search, if
you are not getting solution reframe your problem and then search again. Before
asking anyone perform the above instruction at least two times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning:-&lt;/strong&gt; Learn what you google. If you are just googling and not learning
you are equally dependent as you were before. Here learning refers to mugging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Libraries:-&lt;/strong&gt;This is the basic difference b/w Windows and Ubuntu , In Windows,
we install whole everything to do something but in Ubuntu, we install something
to do a lot of thing. A minimalistic approach towards development.&lt;/p&gt;

&lt;p&gt;As one of the member of open-source community, I would like you to introduce to
its manifesto&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We need to take information, wherever it is stored, make our copies and share
them with the world. We need to take stuff that’s out of copyright and add it to
the archive. We need to buy secret databases and put them on the Web. We need to
download scientific journals and upload them to file sharing networks. We need
to fight
for……….&lt;/em&gt;&lt;a href=&#34;https://en.wikisource.org/wiki/Guerilla_Open_Access_Manifesto&#34; target=&#34;_blank&#34;&gt;[source]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Collective intelligence — multinational, multiagency, multidisciplinary,
multidomain information-sharing and sense-making — is the only means of
obtaining near-real time understanding of complex systems sufficient to achieve
resilience in the face of changes. Many of these changes, including biospheric
ones such as climate change and depletion of planetary resources, are the result
of human activity and industry in the last three
centuries.&lt;/em&gt;&lt;a href=&#34;http://realitysandwich.com/151036/open_source_everything_manifesto/&#34; target=&#34;_blank&#34;&gt;[source]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a more beautiful way&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Beneath the mask, there is more than flesh, there is an idea and ideas are
bulletproof”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Love From:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kharagpur Open Source Society&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is written by &lt;a href=&#34;https://github.com/rava-dosa&#34; target=&#34;_blank&#34;&gt;Apoorva Kumar&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Kickass READMEs</title>
      <link>/blog/writing-kickass-readmes/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0530</pubDate>
      
      <guid>/blog/writing-kickass-readmes/</guid>
      <description>

&lt;h1 id=&#34;writing-kickass-readmes&#34;&gt;Writing Kickass READMEs&lt;/h1&gt;

&lt;p&gt;Writing documentation for code is &lt;strong&gt;extremely&lt;/strong&gt; important. Alas! I realized this
late. Nevertheless, you should not make this mistake again.&lt;/p&gt;

&lt;p&gt;This is written with respect to software related READMEs, if you want guidelines
for other stuff, then probably this isn’t the right place.&lt;/p&gt;

&lt;p&gt;Let’s discuss the potential problems of not having a good README:&lt;/p&gt;

&lt;h3 id=&#34;not-a-clear-description-of-the-project&#34;&gt;Not a clear description of the project&lt;/h3&gt;

&lt;p&gt;I don’t recount how many times this has happened with me. I usually just scroll
through all of my friends’ projects on GitHub to see what they are upto these
days and time and again I have been disappointed by not seeing a good
description about the project and it is too time consuming to read the whole
source code to find out what that repository is actually doing.&lt;/p&gt;

&lt;p&gt;In fact some professional projects too have vague description and you are left
clueless as to what the code does. Sometimes the project is so big that they
can’t really mention all of it in one thing. That is the time you should
probably split it in many repositories or folders (if you desperately want a big
mono repo like Google) and each folder should contain some high-level
information of what the code inside it will do, just like recursive &lt;code&gt;Makefiles&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;not-having-a-installation-guide-or-an-incomplete-one&#34;&gt;Not having a installation guide (or an incomplete one)&lt;/h3&gt;

&lt;p&gt;So since you have got the viewer interested in trying our your software by
writing a good introduction, you would now probably piss off her by sucking at
writing an installation guide.&lt;/p&gt;

&lt;p&gt;What a developer should understand is that since your development environment is
setup to run that code, doesn’t mean everybody’s is. One should always write the
whole installation process for all systems that the software supports and it
should clearly mention that the software doesn’t really have support for this
system but it would be great to support it in future or something.&lt;/p&gt;

&lt;p&gt;For unix-based systems, one should list out all the ways to install the
software. Let’s take an example of Ubuntu. If you have managed to get your
software packaged with a &lt;code&gt;.deb&lt;/code&gt; file and also uploaded it upstream so that it
can be used with &lt;code&gt;apt-get&lt;/code&gt;, then that’s just awesome!&lt;/p&gt;

&lt;p&gt;Sometimes you might be releasing it and then packing the source code in a
&lt;code&gt;tar.gz&lt;/code&gt; format, still awesome. In the latter case, it would be worth while to
mention all of the dependencies required. Also, just the name isn’t enough,
their exact version numbers is even better because you might never know when a
python code breaks because of the version bump because well that’s how things
work in python world.&lt;/p&gt;

&lt;p&gt;If you are expecting the user to do a &lt;code&gt;gcc&lt;/code&gt; based compiling for each source code
file then God just forgive you. It is time to move on to at least &lt;code&gt;Makefiles&lt;/code&gt; to
automate that process for you.&lt;/p&gt;

&lt;p&gt;If something doesn’t work in particular systems, it is &lt;strong&gt;important&lt;/strong&gt; to list it
out.&lt;/p&gt;

&lt;h3 id=&#34;no-user-documentation&#34;&gt;No User Documentation&lt;/h3&gt;

&lt;p&gt;You don’t have a user documentation? Well then how do you expect others to use
your software. User documentation should be in another file or folder (if it is
quite big) and should probably be in some kind of a format which can be rendered
easily. You can either write it in markdown format or in Github wiki’s so that
it can be easily read on GitHub or you can write in &lt;code&gt;man&lt;/code&gt; pages form for the
oldies to read it. But you should have it. And that’s not it, your README should
explicitly point out to the documentation and also tell the user how to access
it and actually read it.&lt;/p&gt;

&lt;p&gt;Also you can include the very basic use case in the README itself.&lt;/p&gt;

&lt;h3 id=&#34;no-guide-for-people-to-actually-contribute&#34;&gt;No guide for people to actually contribute&lt;/h3&gt;

&lt;p&gt;If you have the viewer till now and she is thinking of actually contributing to
your project, then kudos, your project is &lt;strong&gt;awesome&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A very important part of the contributing guide is to setup the development
environment. Again in this, it is worthwhile to get into the platform specific
information. For eg. Windows will have different development environment while
Ubuntu will have a different one. You should mention what IDE you used or the
tools that you used.&lt;/p&gt;

&lt;p&gt;Now your project might have some development related dependencies. You should
mention about that too. Now finally the viewer can have successful environment
setup to actually contribute to your code.&lt;/p&gt;

&lt;p&gt;Now, you might be following some conventions for writing your code, right? It is
worth while to mention the conventions that you have followed in a separate file
and link it in the README.&lt;/p&gt;

&lt;p&gt;Then you would have a specific way or two in which you accept others’ code,
right? You might be using Github’s Pull Request based system or the age old
sending patches via email using &lt;code&gt;git-format-patch&lt;/code&gt; and &lt;code&gt;git-send-email&lt;/code&gt; just
like old times. Whichever you prefer, it is important to specify this in a new
file possibly named as &lt;code&gt;CONTRIBUTING GUIDELINES&lt;/code&gt; or something. If you have any
specifics about the project &lt;strong&gt;mention&lt;/strong&gt; it there. Don’t just expect people to
know it by default.&lt;/p&gt;

&lt;p&gt;It is also worth while to link the &lt;code&gt;easy to fix&lt;/code&gt; bugs for new comers so that
they can get familiar with the code base without trying to mingle with the core
parts of the software.&lt;/p&gt;

&lt;h3 id=&#34;no-technical-documentation&#34;&gt;No technical documentation&lt;/h3&gt;

&lt;p&gt;If you are having a big project, then you might be having a “core” part which is
used by other parts of code. Have you documented it? Or you just expect people
to &lt;code&gt;git-grep&lt;/code&gt; and &lt;code&gt;git-blame&lt;/code&gt; to find the relevant use cases, definition of the
functions and the documentation inside the commit messages? If you are doing
that, it is not exactly bad (I understand you might be having your own reasons)
but it is good to write a technical documentation wherein you will tell the
programmer what a method does and how to use it. This will also make sure she
doesn’t write a method to do the same stuff again and thus it would reduce your
redundancy.&lt;/p&gt;

&lt;h3 id=&#34;no-mention-of-how-to-run-tests&#34;&gt;No mention of how to run tests&lt;/h3&gt;

&lt;p&gt;Of course you project has tests, otherwise how can you make sure that by writing
new code, you don’t break the old code? Your README should contain how to run
the test suite. There are tons of different test suites available in the market
and it is time consuming for people to check out your test framework and make
guesses as how one could probably run it. You should mention how to run
individual tests, the whole test suite, and how to skip some tests, and if your
test suite framework doesn’t support all of these features, then maybe the one
you are using should be replaced.&lt;/p&gt;

&lt;h3 id=&#34;no-license&#34;&gt;No license&lt;/h3&gt;

&lt;p&gt;Yes, legal matters are important too! Whether you are releasing it as an truly
open-sourced software with &lt;code&gt;BSD&lt;/code&gt; license or something else, you should mention
it. If you don’t realize the importance of licensing, that is maybe because your
project isn’t big enough. Once a lot of people read your code, use it, they
might try to finger with it whether you like it or not. You should explicitly
specify “how much fingering” you can tolerate in a separate file named as
&lt;code&gt;LICENCE&lt;/code&gt; in full detail like a legal document and if you are using a popular
license, you can just mention the name in the README.&lt;/p&gt;

&lt;h3 id=&#34;no-place-to-mention-about-bugs&#34;&gt;No place to mention about bugs&lt;/h3&gt;

&lt;p&gt;You don’t have a bug management system? Okay, I agree this isn’t really always
required but if you do, you should explicitly mention and link to that. If you
talk about bugs in GitHub issues, then mention it there. Also if you are using
GitHub, use labels to specify the bugs. If you still track bugs using emails via
mailing list, specify that too also include a link to the old archives of the
mailing list.&lt;/p&gt;

&lt;h3 id=&#34;no-mention-about-the-version-control-system&#34;&gt;No mention about the version control system&lt;/h3&gt;

&lt;p&gt;Well if you are seeing the project on Github, is it wrong to assume that it uses
&lt;code&gt;git&lt;/code&gt;? Yes, there are many projects that I know use multiple version control
systems and the best example is &lt;code&gt;nmap&lt;/code&gt;. They accept patches (and PRs) in all
forms and integrate it together. So explicitly mention about all the version
control systems that you would be using and how you would accept foreign code
for each.&lt;/p&gt;

&lt;h3 id=&#34;no-contacts&#34;&gt;No contacts&lt;/h3&gt;

&lt;p&gt;How should the viewer contact you in case he needs something or has something
for you? Probably now you have a good incentive to give out your contact
information (mainly email is good) for others to contact you or just say “Thanks
for the awesome software!”.&lt;/p&gt;

&lt;h3 id=&#34;no-fancy-gui-pictures&#34;&gt;No fancy GUI pictures&lt;/h3&gt;

&lt;p&gt;You probably would have spent a hell lot of time in designing and tweaking the
GUI and were frustrated when a font size looks bigger than it should, so you
should show it off. There are lots of people who like the fancy GUI way of
software rather than the good old black terminal with green text. If you have a
fancy GUI, try and put the pictures of it in the README. GitHub’s markdown
renders it, but I don’t think &lt;code&gt;man&lt;/code&gt; pages do. But if you &lt;strong&gt;really&lt;/strong&gt; care about
man pages, you probably won’t even have cared enough to make a fancy GUI.&lt;/p&gt;

&lt;h3 id=&#34;no-table-of-contents&#34;&gt;No table of contents&lt;/h3&gt;

&lt;p&gt;Well if you try to write everything that I have pointed out, then it is probably
good for you to follow this advice too. Have a &lt;code&gt;Table of Contents&lt;/code&gt;. This way,
the README will look more organized and it would make reading much easier.&lt;/p&gt;

&lt;p&gt;Okay, now that I have ranted a lot, I hope you know &lt;strong&gt;How to Write KickAss
READMEs&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;This &lt;a href=&#34;http://www.bauva.com/blog/Writing-Kickass-READMEs/&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt; originally
appeared in Pranit Bauva’s &lt;a href=&#34;http://www.bauva.com/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breaking GitHub Down</title>
      <link>/blog/breaking-github-down/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0530</pubDate>
      
      <guid>/blog/breaking-github-down/</guid>
      <description>

&lt;h1 id=&#34;breaking-github-down&#34;&gt;Breaking GitHub Down&lt;/h1&gt;

&lt;p&gt;During my mid semester exams, one night I was getting bored so I decided to
check how to break the most used code hosting website
&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. I wrote a
script&lt;a href=&#34;https://github.com/DefCon-007/Commiter-source&#34; target=&#34;_blank&#34;&gt;[1]&lt;/a&gt; to add infinite
commits to a repository named
“Commiter”&lt;a href=&#34;https://github.com/DefCon-007/Commiter&#34; target=&#34;_blank&#34;&gt;[2]&lt;/a&gt;. It added a dot at the
end of a text file after every commit. The script pushed to the master branch
after every 10,000 commits and then after 1,00,000 commits it deleted the
repository and then cloned it back with just the last commit. I had to do it
because after a large number of commits the directory size was quite
large(approx 7–9 GBs).&lt;/p&gt;

&lt;p&gt;With the help of this script I was able to find three bugs on GitHub after which
they blocked my repository&lt;a href=&#34;https://github.com/DefCon-007/Commiter&#34; target=&#34;_blank&#34;&gt;[2]&lt;/a&gt; .&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Z-index for commit label of contribution graph was not proper&lt;/strong&gt; :&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is the screenshot of the issue I am talking about.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*RTWPIaRI0H0hm0FCwxsZlg.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Issue #1&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The label for the commit number should be above the graph. I got the following
response for this issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*nlqHSF2LRW8qJ5t3J34cvg.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Reply for issue #3&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Latest commit info was not loading :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After some days the I noticed that the GitHub was failing to load the latest
commit information on the repository homepage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*Z4JGEWJ5rZYt_xMtsTu_oA.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Issue #2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And for this issue I got the following reply.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*ZS_cheHLvv5xxdFYQyuGEA.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Reply for issue #2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Contributions graph failing to load :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to me this was a major bug. The contributions graph stopped loading.
It showed the below screen for hours and then the page said “Failed to load
contributions graph”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*H7bPVHj9h4VJn5ABHz9JGQ.png&#34; alt=&#34;&#34; /&gt;
&lt;span class=&#34;figcaption_hack&#34;&gt;Issue #3&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Sadly this was the last issue I was able to track. After reporting this people
at GitHub disabled access to my repository. The reason stated by them was :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The repository you’re inquiring about, DefCon-007/Commiter, has been deemed
abusive to our system and we have disabled it.&lt;/p&gt;

&lt;p&gt;Large numbers of commits do not lend themselves well to versioning with Git and
performance issues with a repository of this size can endanger the availability
of your repo as well as other user’s repositories. Additionally, the pattern of
your commits is very different than that which Git was meant to handle, and
therefore consumes far more resources than a normal Git repository of its size.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And at the end they clearly mentioned that the repository access will not
enabled again.&lt;/p&gt;

&lt;p&gt;P.S. : I was able to reach around 6,567,567 commits.&lt;/p&gt;

&lt;p&gt;So this was my story how I used my mid semester exam frustration to do some
mischief with GitHub.&lt;/p&gt;

&lt;p&gt;References :&lt;/p&gt;

&lt;p&gt;[1]
&lt;a href=&#34;https://github.com/DefCon-007/Commiter-source&#34; target=&#34;_blank&#34;&gt;https://github.com/DefCon-007/Commiter-source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]&lt;a href=&#34;https://github.com/DefCon-007/Commiter&#34; target=&#34;_blank&#34;&gt;https://github.com/DefCon-007/Commiter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is written by &lt;a href=&#34;https://github.com/Defcon-007&#34; target=&#34;_blank&#34;&gt;Ayush Goyal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/accounts/</guid>
      <description>

&lt;h1 id=&#34;accounts&#34;&gt;Accounts&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/community/governance-review-week/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/community/governance-review-week/</guid>
      <description>

&lt;h1 id=&#34;governance-review-week&#34;&gt;Governance Review Week&lt;/h1&gt;

&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;It is a week dedicated to the Governance of KOSS.&lt;/p&gt;

&lt;p&gt;Our intention behind organizing the Governance Review Week is to help the core team members measure their level of involvement in KOSS. The week also promotes open discussions between Seniors and the Core team members. We want each one of our members to be frank with their batchmates as well as seniors in sharing their opinions and perspective on every aspect of KOSS.&lt;/p&gt;

&lt;p&gt;We also review how KOSS performed as a team in the past year. We identify our problems and discuss solutions. We want to make sure we eliminate all forms of toxicity from KOSS (It can be habits of how we do things, or some Core Team members themselves.)&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-structure-and-timeline&#34;&gt;What is the structure and timeline?&lt;/h2&gt;

&lt;p&gt;We physically meet for 3-5 days for 3-4 hours each day. We put up few questions in advance and the Core Team Members have to think and give their answers or their take on the subject. All the second years individually speak for a few minutes. The time limit is decided and followed. We later discuss the answers given by the CTMs. The members send their answers on the Google Group thread of the day. The sessions are recorded and put up on our archives.&lt;/p&gt;

&lt;h2 id=&#34;what-happens-after-this-week&#34;&gt;What happens after this week?&lt;/h2&gt;

&lt;p&gt;Executive Heads discuss the involvement and membership of each Core Team member. If they find someone not being a good fit to continue, this is the time when the team is updated and they are laid off (See &lt;a href=&#34;/docs/community/offboarding-onboarding&#34;&gt;Onboarding/Offboarding&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After the week, Core Team members become the new Executive Heads and Executive Members (See &lt;a href=&#34;/docs/community/governance&#34;&gt;Governance&lt;/a&gt;), quickly followed by an &lt;a href=&#34;/docs/events/introductory-seminar&#34;&gt;Introductory Seminar&lt;/a&gt; and the &lt;a href=&#34;/events/freshers-selections&#34;&gt;Selection of new members&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A new version of KOSS Documentation is released. It is suggested to scrutiny everything which is written over here. Detailed changelog should be published which answers, &amp;ldquo;What changed and Why?&amp;rdquo;, &amp;ldquo;What things worked out really well?&amp;rdquo;, &amp;ldquo;What more should be written?&amp;rdquo;, etc. Alumni of KOSS will receive the changelog via email, and it will be published in the repository as well.&lt;/p&gt;

&lt;h2 id=&#34;why-do-we-do-this&#34;&gt;Why do we do this?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Evaluation. We want Core team members to review their year and contributions to KOSS&lt;/li&gt;
&lt;li&gt;Executive Heads want to understand the priorities and values of the new batch. They form the questions to do so.&lt;/li&gt;
&lt;li&gt;This is a great time to know and identify potential Executive Heads on an individual level.&lt;/li&gt;
&lt;li&gt;Self-awareness of all the members.&lt;/li&gt;
&lt;li&gt;Questioning the principles of KOSS. We discuss and make serious policy changes to how things are done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;archives&#34;&gt;Archives&lt;/h2&gt;

&lt;h3 id=&#34;2019&#34;&gt;2019&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Who were the CTMs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Class of 2017&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were the dates, times and venues?&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Venue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Day 1&lt;/td&gt;
&lt;td&gt;Jan 29, 2019 (Tue)&lt;/td&gt;
&lt;td&gt;9:30 pm (3.5 hours)&lt;/td&gt;
&lt;td&gt;JCB Laboratory Complex&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Day 2&lt;/td&gt;
&lt;td&gt;Jan 30, 2019 (Wed)&lt;/td&gt;
&lt;td&gt;9:00 pm (3 hours)&lt;/td&gt;
&lt;td&gt;JCB Laboratory Complex&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Day 3&lt;/td&gt;
&lt;td&gt;Feb 01, 2019 (Fri)&lt;/td&gt;
&lt;td&gt;6:15 pm (2.5 hours)&lt;/td&gt;
&lt;td&gt;Nehru museum&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Link any Photos/Videos/Audios of the days&lt;/strong&gt;
(Unlisted videos) &lt;a href=&#34;https://www.youtube.com/playlist?list=PLvR6QxlsxrWqHfVWbilcBcBiSYWqldEXQ&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/playlist?list=PLvR6QxlsxrWqHfVWbilcBcBiSYWqldEXQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were the questions/topics day wise? (Link to the answers/Google Group thread)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Day 1 - &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/wFGCjKuoM-k/JK91jCVWFgAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/wFGCjKuoM-k/JK91jCVWFgAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1 (1.5 mins)
  - There were multiple events/workshops organized internally and externally. Share your “wins-list”! Here is your chance to show-off your contributions made to KOSS. Do not underestimate any kind of contribution. Be precise and exhaustive.


- Question 2 (4 mins)
  - We at KOSS have noticed that we have a developed a toxic culture of delaying the work and tasks to the last moment. Though some tasks and timelines are planned, they are not executed properly.
  - What do you think is the root cause of this issue?
  - As an executive, what steps would you take to eliminate such a culture?
  - Would you prefer distributing workload with deadlines to each member or rather have a committed sense of ownership within the group and have people take tasks on their own?


- Question 3 (2 mins)
  - Any organization is driven by a strong bonding nature between the members.
  - Is there a communication gap in KOSS? Mention evidence if you can recall.
  - Think of an idea to overcome it?
  - How will you increase the bonding among the new members and as well as the entire juniors and executives batch?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Day 2 - &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/DmO7K-CZnOQ/UTfVzASxFgAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/DmO7K-CZnOQ/UTfVzASxFgAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1 (4 mins)
  - From what you have observed in your own batch, what are the qualities/characteristics you will be looking forward from the incoming batch? How would you be the judging these criteria?
  - From this year we have decided to go for forms for the first round. (Similar to what GitHub and other tech companies do)
  - What are the questions that you would like to add there? How are you going to judge based on these questions?
  - What are some good red-flags would you use to remove false positives?
  -  How would you plan the interviews and panel (size, composition)?
  - What should be the ideal size of the batch?
  - How do you present KOSS to them i.e. value they will gain from KOSS?


  - Any other comments on selection apart from what we discussed?


- Question 2 ( 3 mins)
  - Why do you think these events were started in the first place?
  - Suggest one new event(workshop/seminar/different genre) that we should conduct in the upcoming year.
  - Why do you want this to be executed?
  - Give a brief overview of how would you go about organizing it as the Executive responsible for the event.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Day 3 - &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/-t4l9WdJYhs/HlS8UpzCFwAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/-t4l9WdJYhs/HlS8UpzCFwAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1 [3 mins]
  - How was your year working in KOSS?
  -  Mention at least 3 things you learned at KOSS.
  -  Which event(s) did you enjoy?
  -  Think about the time when you joined KOSS. Which of your expectations have been met and which ones have not, yet? What were some of the unexpected things you overwhelmingly enjoyed, which you hadn&#39;t expected?
- Question 2 [2 mins]
  - Mention one thing that you want to change about KOSS (be it the culture, the hierarchy structure, the management or anything that you feel will be harmful in the long run)?


- Question 3 [2 mins]
  - Is KOSS different from other societies?  Why/Why not?
  - How is KOSS helpful to you? ( We try to spread open source ideas, etc. for the people in campus but what about you? )
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2018&#34;&gt;2018&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Who were the CTMs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Class of 2016&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were the dates, time and venues?&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Venue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Day 1&lt;/td&gt;
&lt;td&gt;Feb 4, 2018 (Sun)&lt;/td&gt;
&lt;td&gt;9:00 PM (3 hours)&lt;/td&gt;
&lt;td&gt;Nehru museum&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Day 2&lt;/td&gt;
&lt;td&gt;Feb 5, 2018 (Mon)&lt;/td&gt;
&lt;td&gt;9:00 PM (2.5 hours)&lt;/td&gt;
&lt;td&gt;Nehru museum&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Day 3&lt;/td&gt;
&lt;td&gt;Feb 6, 2018 (Tue)&lt;/td&gt;
&lt;td&gt;9:00 PM (2 hours)&lt;/td&gt;
&lt;td&gt;Nehru museum&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Day 4&lt;/td&gt;
&lt;td&gt;Feb 9, 2018 (Fri)&lt;/td&gt;
&lt;td&gt;9:00 PM (4 hours)&lt;/td&gt;
&lt;td&gt;Vikramshila garden (Rao canteen)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Link any Photos/Videos/Audios of the day&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlisted videos/playlist&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=c4r4nk1QKdQ&amp;amp;&amp;amp;list=PLzumvJj1-3nB-p7awDUJ9kMz9--fkDbIs&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=c4r4nk1QKdQ&amp;amp;&amp;amp;list=PLzumvJj1-3nB-p7awDUJ9kMz9--fkDbIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were the questions/topics day wise? (Link to the answers/Google Group thread)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Day 1: &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/WxBNzdCBb5Y/U0cCf-mTBwAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/WxBNzdCBb5Y/U0cCf-mTBwAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1 (4 mins)
- We conducted numerous flagship events/seminars during the past year, e.g., KWoC, Summit, Git workshop, Dual boot best, GSoC seminar.
  - Why do you think these events were started in the first place?
  - What order would you suggest for the organization of the Autumn Sem events? Why?
  - Why and how do you think new ideas come up? How would you, as an Executive, promote innovation of ideas in the team?
  - Suggest one new event(workshop/seminar/different genre) that we should conduct in the upcoming year.
    - Why do you want this to be executed?
    - Give a brief overview of how would you go about organizing it as the Executive responsible for the event.


- Question 2 (2 mins)
- At KOSS, we believe that before organizing any event, it’s important to discuss the pros and cons. The ability to listen to others and being humble about your idea is of prime importance.
- We encourage people to share their passion for technologies with the team. Thus, we appreciate transcending the “senior”-”junior” hierarchies (as long as its mutually respectable) in order to share your thoughts and opinions. At the same time, it is required of every member to take ownership of their work and readily accept their mistakes.
  - Share an instance when you took a stance about something you are passionate about.
  - As a “senior”, how would you promote this culture among the team, especially the newcomers?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Day 2: &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/WxBNzdCBb5Y/XtzHMunyBwAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/WxBNzdCBb5Y/XtzHMunyBwAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1: (3 mins)
- The ability to communicate clearly with the team members forms the basis of any successful organization. We created the KOSS Slack Workspace to facilitate everyone to share their opinions with others and stay connected.
  - What’s your take on current state of intra-group communications in KOSS (i.e. Senior - Executive, Executive - Juniors, Senior - Junior)?  (1 min)
  - How do you communicate with others in KOSS? (20 sec each)
    - Batchmates
    - Executives
    - Seniors
  - According to you, what should one post publicly on channels and what should be discussed in private or DMs? (1 min)


- Question 2: (2 mins)
- Let’s now focus on our hierarchy and what should be expected of the different batches in KOSS. (30 sec each)


  - Ideally, what should be the role of Executive Heads?
  - What should be the task of Juniors/newcomers?
  - What should be governed by the Seniors?
  - How do you get the team members involved in the proceedings of KOSS?

Question 3: (1 min)


- Do you agree that the level of comfort between “seniors” and Executives is more than that between “juniors” and (seniors + Executives)?
- If so:
  - Why do you think it exists?
  - One suggestion on how we can bridge this gap.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Day 3: &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/H1A5SG8RV1g/LKLGdHpACAAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/H1A5SG8RV1g/LKLGdHpACAAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1: (2 mins)
  1. What are the qualities and experiences do you look for while inducting first-year students?
  2. What are some good red-flags would you use to remove false positives?
  3. How do you present KOSS to them i.e. how would KOSS generate value for them?
    Mention the reasons for each of your answers.


- Question 2: (2 mins) How do you plan to spend the year with them, especially the first few months? How should we increase the communication between new people and the old members? Does having a room help? What are some crucial problems and how can we solve them? One example is the inertia to join Slack.


- One important note:
  -  It&#39;s totally unethical for us to not listen to the person who is speaking, does not matter if they are our senior, batchmate or junior. If we do so, it&#39;s a waste of none other than our time. We should prioritize listening over speaking.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Day 4: &lt;a href=&#34;https://groups.google.com/d/msg/kossiitkgp/RHlFh8Cv8po/eQNh_geTBAAJ&#34; target=&#34;_blank&#34;&gt;https://groups.google.com/d/msg/kossiitkgp/RHlFh8Cv8po/eQNh_geTBAAJ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Question 1: (4 mins)
- How was your year working in KOSS?
  1. What activities did you work on?
  2. Mention at least 3 things you learned at KOSS.
  3. Which event(s) did you enjoy?
  4. How did you help in organizing Open Source Summit?
  5. Do you think your colleagues worked more than you for KWoC/Summit? How could you have helped them?
  6. Think about the time when you joined KOSS. Which of your expectations have been met and which ones have not, yet? What were some of the unexpected things you overwhelmingly enjoyed, which you hadn’t expected?


- Question 2: (2 mins)
- Do you think KOSS has any toxic element (event/culture/person) which you think might harm in the long run? Why do you think so? What’s your proposal to deal with it?
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/community/governance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/community/governance/</guid>
      <description>

&lt;h1 id=&#34;governance&#34;&gt;Governance&lt;/h1&gt;

&lt;h2 id=&#34;hierarchy&#34;&gt;Hierarchy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Executive Heads&lt;/strong&gt;: The public face, managers and the decision makers.&lt;/li&gt;
&lt;li&gt;Rest -

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Core Team Members&lt;/strong&gt;: Freshers batch. (&amp;lt; 1 year of experience)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Executive Members&lt;/strong&gt;: Batchmates of Executive Heads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advisors&lt;/strong&gt;: People who have been an Executive member in the past and are still on the campus.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alumni&lt;/strong&gt;: People who have graduated but were Executives when on campus.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permanent membership of KOSS mandates serving one year as an Executive (either as Head or Member).&lt;/p&gt;

&lt;h2 id=&#34;the-story&#34;&gt;The Story&lt;/h2&gt;

&lt;p&gt;Members join KOSS in their first year as Core Team members. They spend their time learning technologies, as well as working on raising the awareness of Open Source. At the end of their second year, they take up the role of Executive Heads and Executive Members after a rigorous &lt;a href=&#34;/docs/community/governance-review-week&#34;&gt;Governance Review Week&lt;/a&gt;. The former Executive Heads and Advisors decide whether a CTM will become an Executive Head or an Executive Member. (See &lt;a href=&#34;/docs/community/onboarding-offboarding&#34;&gt;Onboarding/Offboarding&lt;/a&gt;). After serving another year, they pass on the baton to the next batch, and they become Advisors while staying on the campus. They actively take part in the discussions, events, and seminars as per their skills and expertise. They graduate to become KOSS Alumni, the role of which is undecided yet.&lt;/p&gt;

&lt;h2 id=&#34;the-policy-of-koss-membership&#34;&gt;The policy of KOSS membership&lt;/h2&gt;

&lt;p&gt;We recruit UG 1st years in the team, preferably after they have spent one semester on the campus. We can also recruit any 2nd year in their third semester, based on recommendations by the members.&lt;/p&gt;

&lt;p&gt;In the spring semester of Core Team members, they go through a Governance week discussion and finally become the new Executives (Heads and Members). Former Executives should carefully offboard members who are not a good fit for the upcoming Executive batch. Every single individual should have a net positive impact on the team. See &lt;a href=&#34;/docs/community/onboarding-offboarding&#34;&gt;Onboarding/Offboarding&lt;/a&gt; for more detail.&lt;/p&gt;

&lt;h2 id=&#34;detailed-role-descriptions&#34;&gt;Detailed Role Descriptions&lt;/h2&gt;

&lt;h3 id=&#34;1-executives&#34;&gt;1. Executives&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Members in their late second and early third year&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-1-executive-heads&#34;&gt;1.1 Executive Heads&lt;/h3&gt;

&lt;p&gt;Executive Heads are de facto managers of KOSS. They have complete authority to make decisions and take up initiatives. They manage KOSS public relations on Emails and Social Media. Executive Heads are responsible for inducting new members as well as pruning anyone’s membership as they unanimously decide. In short, Executive Heads are KOSS.&lt;/p&gt;

&lt;p&gt;Executive Heads decide the timeline of KOSS. They call the full-body general meetings. Executive Heads lead all the meetings and events unless they explicitly request anyone else to do so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All&lt;/strong&gt; of KOSS meetings have to be conducted in the knowledge of an Executive Head. Executive Heads have to take steps to prevent any abuse of power or harassment.&lt;/p&gt;

&lt;p&gt;Executive Heads regularly consult with the Advisors. They must do it before introducing any change with high impact.&lt;/p&gt;

&lt;p&gt;They approve Pull Requests to &lt;a href=&#34;https://github.com/kossiitkgp/accounts&#34; target=&#34;_blank&#34;&gt;https://github.com/kossiitkgp/accounts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-2-executive-members&#34;&gt;1.2 Executive Members&lt;/h3&gt;

&lt;p&gt;Executive Members do not take the lead but have experience in working with KOSS and the Executive Heads. Their primary objectives are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Involving Core Team members through projects/hackathons to improve their skills&lt;/li&gt;
&lt;li&gt;Supporting Executive Heads when necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They act as resources of KOSS. They offer their suggestions constantly throughout the year.&lt;/p&gt;

&lt;p&gt;They do not make any decision for KOSS without consulting the Executive Heads, or unless told to do so.&lt;/p&gt;

&lt;h3 id=&#34;2-core-team-members&#34;&gt;2. Core Team members&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Members in their late first and early second year&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Core Team members always represent the next generation of KOSS and FOSS culture at IIT Kharagpur. They actively volunteer to learn and conduct events, workshops, classes, etc. CTMs also learn how to work in a team. “Community is more important than Code,” and the core team should take this seriously.&lt;/p&gt;

&lt;p&gt;At the end of the session, there is a week-long discussion with the Core Team members where they put their ideas forward on topics such as ‘Events,’ ‘Community Standards,’ ‘New hires,’ ‘Meetings and Communications’, etc. After these discussions, the former Executive Heads select the new Executive Heads and Executive Members and terminate the membership of people who are not a cultural fit to work with the Executives.&lt;/p&gt;

&lt;h3 id=&#34;3-advisors&#34;&gt;3. Advisors&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Members who have been an Executive before and are still on campus. Late third year onwards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Advisors, in general, have more technical experience. They have seen a lot of KOSS, and the members should use their experience as a resource. They actively suggest better technologies to be used in KOSS. They also make sure the Executive Heads are not over-prioritizing anything and are relaxed. They continuously take updates from the Executive Heads about what is going in KOSS. They intervene when asked by an Executive to resolve any conflict. They can also lead meetings if Executive Heads do not object.&lt;/p&gt;

&lt;p&gt;One of the Advisors acts as the Treasurer of KOSS and oversees the finances. See &lt;a href=&#34;/docs/community/accounts&#34;&gt;Accounts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;4-alumni&#34;&gt;4. Alumni&lt;/h3&gt;

&lt;p&gt;“Members who have graduated from KGP”&lt;/p&gt;

&lt;p&gt;The role has no formal duties, as of now.&lt;/p&gt;

&lt;h2 id=&#34;guidelines&#34;&gt;Guidelines&lt;/h2&gt;

&lt;h3 id=&#34;guidelines-for-executive-heads&#34;&gt;Guidelines for Executive Heads -&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do not miss a meeting unless extremely required (health or out of station). Your lack of involvement will psychologically disolve your responsibilities. Schedule meetings according to the availability of all the Executive Heads.&lt;/li&gt;
&lt;li&gt;Be in sync among yourselves. Frequently meet with each other. You will build an amazing friendship with this, which will remain beyond KOSS.&lt;/li&gt;
&lt;li&gt;Respect time of your fellow Executives and Juniors. Do not slack off.&lt;/li&gt;
&lt;li&gt;Always have a lump-sum timeline for events and internal workshops for a particular semester (or year). Core Team members are an essential part of overall execution, so not having a timeline puts them at blindside, and they cannot manage their time.&lt;/li&gt;
&lt;li&gt;Your Core Team Members are your KGP juniors as well. Make sure they prioritize their mental and physical health.&lt;/li&gt;
&lt;li&gt;Follow &amp;ldquo;Survival first&amp;rdquo; rule. You need to ensure that your Core Team members have learnt enough to continue in KOSS. You can prioritize this over conducting a fancy workshop.&lt;/li&gt;
&lt;li&gt;Make sure KOSS is a sexually and emotionally non-hostile place to work. Importance of this point is definitely not determined by where it is placed.&lt;/li&gt;
&lt;li&gt;Build strong connections with your Core Team members. Have regular 1:1s. Prefer Meetings and Calls over Slack and Email.&lt;/li&gt;
&lt;li&gt;Keep your Executive Members as involved as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;guidelines-for-executive-members&#34;&gt;Guidelines for Executive Members -&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Give Executive Heads their freedom. Do not interrupt or hinder their momentum of doing things.&lt;/li&gt;
&lt;li&gt;Offer suggestions whenever you feel like it.&lt;/li&gt;
&lt;li&gt;Come to meetings. Build relations with Core Team Members. Be active on Slack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;guidelines-for-core-team-members&#34;&gt;Guidelines for Core Team Members -&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We believe in self-motivation and a sense of ownership. Try to take initiatives and tasks on your own.&lt;/li&gt;
&lt;li&gt;Make sure you are active within the community. Reach out to your batchmates and seniors once in a while. Discuss stuff with people, or you might end up losing interest.&lt;/li&gt;
&lt;li&gt;Communication skills are vital for any line of work. Practice public speaking and teaching as often as possible. Try to get over your stage fear (if you have one).&lt;/li&gt;
&lt;li&gt;There will always be people who do certain things better than you in one or more aspect. Don’t get intimidated by this. Instead, try to get the most of out it. Knowledge-sharing is how we as individuals grow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;guidelines-for-advisors&#34;&gt;Guidelines for Advisors -&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Do not disappear.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/community/onboarding-offboarding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/community/onboarding-offboarding/</guid>
      <description>

&lt;h1 id=&#34;onboarding-offboarding&#34;&gt;Onboarding/Offboarding&lt;/h1&gt;

&lt;h2 id=&#34;how-to-onboard-someone-in-koss&#34;&gt;How to onboard someone in KOSS?&lt;/h2&gt;

&lt;p&gt;See also &lt;a href=&#34;/docs/community/freshers-induction&#34;&gt;Fresher&amp;rsquo;s Induction&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add them to the “Newbies” GitHub team.&lt;/li&gt;
&lt;li&gt;Add them to the Google Group. Check the delivery settings.&lt;/li&gt;
&lt;li&gt;Add them to the Slack.&lt;/li&gt;
&lt;li&gt;Add them to their batch’s private channel.&lt;/li&gt;
&lt;li&gt;Add their contact details on &lt;a href=&#34;https://github.com/kossiitkgp/secrets&#34; target=&#34;_blank&#34;&gt;https://github.com/kossiitkgp/secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Assign their 1:1 group&lt;/li&gt;
&lt;li&gt;Add their name to the website&lt;/li&gt;
&lt;li&gt;Add them to facebook groups (unofficial)&lt;/li&gt;
&lt;li&gt;Give access to KOSS’ facebook page&lt;/li&gt;
&lt;li&gt;Make them store numbers of everyone in team&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-to-re-designate-core-team-members-as-executives&#34;&gt;How to re-designate Core Team Members as Executives?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make Executive Members the Admins of Slack workspace.&lt;/li&gt;
&lt;li&gt;Make Executive Heads the Owners of Slack workspace.&lt;/li&gt;
&lt;li&gt;Add all Executive Members and Heads to the &lt;code&gt;Admins&lt;/code&gt; team on GitHub org. Remove them from the &lt;code&gt;Newbies&lt;/code&gt; team.&lt;/li&gt;
&lt;li&gt;Ask an Owner of kossiitkgp GitHub org to change role of Executive Heads as &lt;code&gt;Owners&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make Executive Heads the Owners of the Google Group.&lt;/li&gt;
&lt;li&gt;Update Contacts README on &lt;code&gt;kossiitkgp/secrets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Release the names from blog/facebook page&lt;/li&gt;
&lt;li&gt;Update the “Members” section on the website&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-to-offboard-someone-from-koss&#34;&gt;How to offboard someone from KOSS?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Remove them from the GitHub organization.&lt;/li&gt;
&lt;li&gt;Disable their account on Slack (Contact an owner if they are admin)&lt;/li&gt;
&lt;li&gt;Remove them from the Google group&lt;/li&gt;
&lt;li&gt;Update the Contacts on &lt;a href=&#34;https://github.com/kossiitkgp/secrets&#34; target=&#34;_blank&#34;&gt;https://github.com/kossiitkgp/secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Update the “Members” section on the website - &lt;a href=&#34;https://kossiitkgp.org&#34; target=&#34;_blank&#34;&gt;https://kossiitkgp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Remove access to KOSS’ facebook page&lt;/li&gt;
&lt;li&gt;Remove their listing from website&lt;/li&gt;
&lt;li&gt;Remove them from facebook groups (if any)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-do-we-lay-off-some-core-team-members-what-are-the-reasons&#34;&gt;Why do we lay off some Core Team members? What are the reasons?&lt;/h2&gt;

&lt;p&gt;A bad influence justifies bad turn of events in the future. When they become an advisor, they will recruit similar kind of people. New Core Team Members will start following them. Hence, we can not be passive about the membership of a CTM. We have to make sure we purge any unwanted behavior in time. Hence, it is important that we keep the doors open until a CTM becomes an Executive.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If they do not align with our vision. Read &lt;a href=&#34;/docs/founding-principles&#34;&gt;Founding Principles of KOSS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If they often do not show up in Meetings, Slack, or E-mails.&lt;/li&gt;
&lt;li&gt;If they never take ownership of KOSS.

&lt;ol&gt;
&lt;li&gt;If they repeatatively do not care about how our meetings or events happen in their absense.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;If they never take leadership of KOSS. If they never take any initiatives or never took part in any initiative by one of their batchmates.

&lt;ol&gt;
&lt;li&gt;If they depend upon their batchmates all the time. If they never volunteer and take up any work by their own.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;If they clearly feel or state that they do not belong here.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: One semester may not be enough to judge. Preferably do it after &lt;a href=&#34;/docs/community/governance-review-week&#34;&gt;Governance Review Week&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-do-we-classify-a-ctm-as-executive-head-and-executive-member&#34;&gt;How do we classify a CTM as Executive Head and Executive Member?&lt;/h2&gt;

&lt;p&gt;The answer to this question should come from - the &lt;a href=&#34;/docs/community/governance&#34;&gt;Governance doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the Governance Review Week, all Executives and Advisors meet and decide for each CTM. Here are some guidelines -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the governance doc thoroughly and judge.&lt;/li&gt;
&lt;li&gt;An Executive Head must be self-motivated about KOSS.&lt;/li&gt;
&lt;li&gt;An Executive Head must be capable of leading a new batch of KOSS.&lt;/li&gt;
&lt;li&gt;Think about all the new Executive Heads as a group. Their should not be any friction in it.&lt;/li&gt;
&lt;li&gt;Do not select a scary low number of Heads. Keep it 3-6.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/community/one-on-one/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/community/one-on-one/</guid>
      <description>

&lt;h1 id=&#34;1-1&#34;&gt;1:1&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Pronounced as &lt;em&gt;one on one&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During &lt;a href=&#34;/docs/community/freshers-induction&#34;&gt;Freshers&amp;rsquo; Induction&lt;/a&gt;, every &lt;a href=&#34;/docs/community/governance&#34;&gt;Core Team Member&lt;/a&gt; is assigned one (or more) Executive(s) as 1:1 mentor(s). The mentee and mentor(s) decide the frequency, length, time, venue and nature of their 1:1 meetups.&lt;/p&gt;

&lt;p&gt;A 1:1 can be about
* Career goals of Mentor/Mentee
* Feedback/Discussion about involvement in KOSS
* Brainstorming on new ideas/articles and implementations
* Creating a comfort zone for new members to open up with the team&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use Calendar to schedule your 1:1. Use the weekly/bi-weekly/monthly schedule feature.&lt;/li&gt;
&lt;li&gt;Come prepared with questions to ask or points to discuss. You can create an email thread between you and your mentor and log notes after the meetups.&lt;/li&gt;
&lt;li&gt;1:1 mentorship is voluntary. Every Executive does not need to be a mentor if they are unable to commit their time.&lt;/li&gt;
&lt;li&gt;Mentors can invite any Advisor in any meeting. 1:1s are informal and inclusive.&lt;/li&gt;
&lt;li&gt;Mentors can be changed upon request by either the mentor or the mentee.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;guidelines-for-the-mentors&#34;&gt;Guidelines for the mentors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make sure your mentee feels comfortable.&lt;/li&gt;
&lt;li&gt;Let the mentee know that 1:1s are about them.&lt;/li&gt;
&lt;li&gt;Do not repeatedly cancel scheduled 1:1s. You may be creating a lot of impact on someone&amp;rsquo;s KGP journey by taking 30 minutes out of your week.&lt;/li&gt;
&lt;li&gt;Some questions to ask your mentee are

&lt;ul&gt;
&lt;li&gt;How are you feeling?&lt;/li&gt;
&lt;li&gt;What is on your mind?&lt;/li&gt;
&lt;li&gt;What are you most excited about?&lt;/li&gt;
&lt;li&gt;What are you most worried about?&lt;/li&gt;
&lt;li&gt;Is there anything we should start doing as a team?&lt;/li&gt;
&lt;li&gt;How do you want our 1:1s to go? Do you have any preferences?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;guidelines-for-the-mentees&#34;&gt;Guidelines for the mentees&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The meetups are about you. Be comfortable and use your mentor(s) as resources to discuss anything you wish.&lt;/li&gt;
&lt;li&gt;Some questions to ask your mentor(s) are

&lt;ul&gt;
&lt;li&gt;What do you think about my involvement in KOSS? How can I improve upon it?&lt;/li&gt;
&lt;li&gt;Have you ever been in situation X? How did you solve it?&lt;/li&gt;
&lt;li&gt;I am working on X these days. Do you have any suggestions or feedback?&lt;/li&gt;
&lt;li&gt;I am thinking about learning X. Can you tell me the pros/cons of doing so?&lt;/li&gt;
&lt;li&gt;Tell me something about yourself which I might not know.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/events/freshers-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/events/freshers-selection/</guid>
      <description>

&lt;h1 id=&#34;freshers-selection&#34;&gt;Freshers&amp;rsquo; Selection&lt;/h1&gt;

&lt;h2 id=&#34;how-do-we-recruit&#34;&gt;How do we recruit?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This should be carefully re-evaluated every year. People change, along with the needs of KOSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Core parameters for hiring are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge&lt;/li&gt;
&lt;li&gt;Will to Learn&lt;/li&gt;
&lt;li&gt;Will to Teach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The parameters are given equal weight.&lt;/p&gt;

&lt;h3 id=&#34;screening-round&#34;&gt;Screening Round&lt;/h3&gt;

&lt;p&gt;An online form is released with few questionnaires. We carefully go through their answers and invite potential candidates for a sit-in interview with the team. We do this to focus more on the interviews with the eligible candidates.&lt;/p&gt;

&lt;p&gt;Questions on the form for screening round -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Roll Number&lt;/li&gt;
&lt;li&gt;Email ID&lt;/li&gt;
&lt;li&gt;Phone&lt;/li&gt;
&lt;li&gt;Share with us your URLs (GitHub, portfolio, any projects, etc.)&lt;/li&gt;
&lt;li&gt;Do you have any achievements you want us to know?&lt;/li&gt;
&lt;li&gt;When did you start programming? What motivates you? Tell us your story.&lt;/li&gt;
&lt;li&gt;What are you learning these days?&lt;/li&gt;
&lt;li&gt;What other societies/clubs/fests are you a part of or you want to be? How long have you been there? What are your opinions about them?&lt;/li&gt;
&lt;li&gt;Write your skills (Languages, frameworks, design skills, etc.)&lt;/li&gt;
&lt;li&gt;Why do you want to join KOSS? What are your expectations?&lt;/li&gt;
&lt;li&gt;Enlist all of your interactions with the KOSS community over the year&lt;/li&gt;
&lt;li&gt;Any comments?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;interview-round&#34;&gt;Interview Round&lt;/h3&gt;

&lt;p&gt;We form a few panels consisting of 3-5 people. Each panel should have at least one advisor. The interviewers evaluate them during the conversation. If a candidate does not have any projects done so far, a task must be given to check code quality. The tasks are on spot or to be completed within 24 hours.&lt;/p&gt;

&lt;h2 id=&#34;panel-discussion-and-the-release-of-results&#34;&gt;Panel Discussion and the release of results&lt;/h2&gt;

&lt;p&gt;We all meet a few days after the interview round and discuss each potential candidate. A Physical meeting is required before finalizing the list of new members.&lt;/p&gt;

&lt;p&gt;Also see &lt;a href=&#34;/docs/community/onboarding-offboarding&#34;&gt;Onboarding/Offboarding&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;guidelines&#34;&gt;Guidelines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Have a physical meeting to discuss the selection of freshers every year.&lt;/li&gt;
&lt;li&gt;Make sure the form reaches all the freshers. Good marketing is recommended.&lt;/li&gt;
&lt;li&gt;Make the students comfortable during the interview. Freshers can get nervous and you may not get to know them completely.&lt;/li&gt;
&lt;li&gt;For on-spot tasks, judge by their effort.&lt;/li&gt;
&lt;li&gt;Give the interviewees an experience to remember. Talk politely and be curious in them.&lt;/li&gt;
&lt;li&gt;It is important that the panelists write detailed comments for every candidate after their interview. This helps in judging them later.&lt;/li&gt;
&lt;li&gt;Do not share the Sheets (responses, interview comments, etc.) with KOSS internet accounts. Maintain them on personal accounts. There is no need to archive them.&lt;/li&gt;
&lt;li&gt;Do not share Sheets with the link (use email addresses to add collaborators). Limit possibility of the new members viewing the sheets in the future.&lt;/li&gt;
&lt;li&gt;Do not discuss selections on public channels on Slack or Google Group.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;red-flags&#34;&gt;Red Flags&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What do we mean by Red Flags?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you spot a red flag, you say No at the very moment. No second thoughts or arguments.
The Red flags listed below do not mean they are bad qualities as a programmer or as a human being. They only mean that the person is not a cultural fit for KOSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Mentions disinterest in Teaching.&lt;/li&gt;
&lt;li&gt;Mentions disinterest in Learning.&lt;/li&gt;
&lt;li&gt;No idea what Open Source is (little knowledge is not a red flag)&lt;/li&gt;
&lt;li&gt;Highly involved in Competitive programming (as a sport)&lt;/li&gt;
&lt;li&gt;“Let us join just another society”-kind of attitude&lt;/li&gt;
&lt;li&gt;&amp;ldquo;I want to learn coding/data&amp;rdquo;. Thinks KOSS is a society which teaches members to code.&lt;/li&gt;
&lt;li&gt;Mentions “Google Summer of Code” as the primary reason to join KOSS&lt;/li&gt;
&lt;li&gt;Member of a society/club/fest with high involvement (ACell/KTJ/SF/E-Cell)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;positive-points&#34;&gt;Positive points&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Participated in KWoC or Summit&lt;/li&gt;
&lt;li&gt;Follows KOSS, already in touch with any of its members&lt;/li&gt;
&lt;li&gt;Tried tools/frameworks with a mindset to explore&lt;/li&gt;
&lt;li&gt;Passion&lt;/li&gt;
&lt;li&gt;Self-confidence&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;negative-points&#34;&gt;Negative points&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Showing off grades in PDS or CG/SG&lt;/li&gt;
&lt;li&gt;Inability to express or communicate clearly&lt;/li&gt;
&lt;li&gt;Trying to flatter by talking against Competitive Programming or praising KOSS too much.&lt;/li&gt;
&lt;li&gt;Thinks lowly / of stuff like FrontEnd Designing or designing in general.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Negative points differ from Red Flags. A Red Flag is too serious to consider. However, negative points do not indicate rejecting a candidate. The interviewers need to make extra effort in understand the interviewee. They may also require extra attention from the Executives/Advisors to align with our ideologies.&lt;/p&gt;

&lt;h2 id=&#34;faqs&#34;&gt;FAQs&lt;/h2&gt;

&lt;h3 id=&#34;why-do-we-hold-selections-in-the-spring-semester&#34;&gt;Why do we hold selections in the spring semester?&lt;/h3&gt;

&lt;p&gt;JEE Students do not do serious programming before coming to KGP. Hence, we give them a semester to explore their interests as well as attend workshops/events in the Autumn semester.&lt;/p&gt;

&lt;h2 id=&#34;can-we-recruit-second-year-students-as-well&#34;&gt;Can we recruit second-year students as well?&lt;/h2&gt;

&lt;p&gt;Yes, absolutely! A few of KOSS members joined in their second year. However, it should be done as early as possible (in their Autumn semester). We should not hire second year students in their spring semester because that would create a whole lot of difference in the batch, which soon would become Executives.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-ideal-number-of-students-to-recruit&#34;&gt;What is the ideal number of students to recruit?&lt;/h2&gt;

&lt;p&gt;A batch with more than 15 people is hard to manage. Increasing the team size makes it difficult to have like-minded people in the entire team across all the batches. Also, we should not be doing anything which requires the involvement of more than 15 people in every batch.&lt;/p&gt;

&lt;h2 id=&#34;archives&#34;&gt;Archives&lt;/h2&gt;

&lt;h3 id=&#34;2019&#34;&gt;2019&lt;/h3&gt;

&lt;p&gt;Facebook post - &lt;a href=&#34;https://www.facebook.com/kossiitkgp/posts/2072478999495756&#34; target=&#34;_blank&#34;&gt;https://www.facebook.com/kossiitkgp/posts/2072478999495756&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2018&#34;&gt;2018&lt;/h3&gt;

&lt;p&gt;The selection still followed direct walk-in interviews. The interviews were conducted on two days. The number of people who showed up was large compared to the number of interviewers. The experience was tiring and very repetitive with people who did not align with our principles. It was then decided that we should not do direct walk-in interviews.&lt;/p&gt;

&lt;p&gt;Facebook post - &lt;a href=&#34;https://www.facebook.com/kossiitkgp/photos/a.551030724973932/1642194875857506/?type=3&amp;amp;theater&#34; target=&#34;_blank&#34;&gt;https://www.facebook.com/kossiitkgp/photos/a.551030724973932/1642194875857506/?type=3&amp;amp;theater&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2017&#34;&gt;2017&lt;/h3&gt;

&lt;p&gt;Facebook post - &lt;a href=&#34;https://www.facebook.com/kossiitkgp/photos/a.551030724973932/1230476980362633/?type=3&amp;amp;theater&#34; target=&#34;_blank&#34;&gt;https://www.facebook.com/kossiitkgp/photos/a.551030724973932/1230476980362633/?type=3&amp;amp;theater&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2016&#34;&gt;2016&lt;/h3&gt;

&lt;p&gt;A single round of interviews was conducted. Around 50 people showed up. We used Google Sheets to note down interview comments.&lt;/p&gt;

&lt;p&gt;Facebook post - &lt;a href=&#34;https://www.facebook.com/kossiitkgp/photos/a.551030724973932/993755030701497/?type=3&amp;amp;theater=&#34; target=&#34;_blank&#34;&gt;https://www.facebook.com/kossiitkgp/photos/a.551030724973932/993755030701497/?type=3&amp;amp;theater=&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/events/python-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/events/python-classes/</guid>
      <description>

&lt;h1 id=&#34;python-classes&#34;&gt;Python classes!&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
